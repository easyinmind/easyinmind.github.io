(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{419:function(v,_,a){"use strict";a.r(_);var e=a(21),t=Object(e.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"起因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#起因"}},[v._v("#")]),v._v(" 起因")]),v._v(" "),a("p",[v._v("断断续续webpack也接触学习许久了，说起来简单也复杂。简单在于，它只是作为前端代码构建的工具之一。复杂在如何根据实际项目的应用场景去处理它的配置、插件、loader，如何提高构建的性能等。")]),v._v(" "),a("h2",{attrs:{id:"一些概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些概念"}},[v._v("#")]),v._v(" 一些概念")]),v._v(" "),a("ol",[a("li",[v._v("SPA、MPA")]),v._v(" "),a("li",[v._v("loader")]),v._v(" "),a("li",[v._v("plugin")]),v._v(" "),a("li",[v._v("tree shaking")]),v._v(" "),a("li",[v._v("code split")]),v._v(" "),a("li",[v._v("监听更新、自动更新、热更新")]),v._v(" "),a("li",[v._v("chunk、module、bundle")]),v._v(" "),a("li",[v._v("各种hash")]),v._v(" "),a("li",[v._v("……")])]),v._v(" "),a("h2",{attrs:{id:"思想和原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思想和原理"}},[v._v("#")]),v._v(" 思想和原理")]),v._v(" "),a("p",[v._v("太多的概念和配置，在学起来的时候感觉力不从心，而且还要面对不对的更新。其实，只需要记住它的初衷，前端日新月异的发展各种新的技术概念不断涌出，也更加稳定了webpack或者说工程化的地位。"),a("br"),v._v("\n前端能否创造价值？答案是不太理想的，当然也可以说是有价值的。但是这个价值更多的应该是对于工作中的产出。说回来，前端的代码最终是要有一个运行的宿主环境，浏览器、小程序、app、客户端等。语言的发展是必然的，但是宿主环境不可能像语言的更新这样频繁。就如ES的不断更新，各大浏览器商的支持却不是那么理想。"),a("br"),v._v("\nwebpack或者说编译工具就是作为中间沟通的一个桥梁，结合babel等可以使各种各样的代码（less、scss、js、react、vue、……）跑在宿主环境。这是不可或缺的一环。当然编译工具是一个比较广泛的话题，除了让各种代码运行在宿主环境上外，也可以根据不同的宿主环境改变配置达到更好的运行体验。"),a("br"),v._v("\n这里扯了一堆，只是一些不太成熟的想法。说回webpack，它的核心思想说的是一切皆模块。前端的本质其实只有html、css、js。但是前端的各种框架、预编译器、新的语法等已经是现在高效率开发必不可少的一部分。webpack的作用就是将这些可以提高我们开发效率的新技术转为最基本的静态资源。当然webpack并不能做全部的事情，他只是提供了一个环境和机制，具体的转换工作通过其它的工具结合loader来实现。它内部实现了一套机制，一个运行时，一个时间段。"),a("br"),v._v("\n我是这样简单理解webpack的，其实就只有两点：")]),v._v(" "),a("ul",[a("li",[v._v("入口")]),v._v(" "),a("li",[v._v("出口")])]),v._v(" "),a("p",[v._v("当然输入和输出中间的过程就是我们需要处理和关注的，对此后面有机会会再写一篇表述。")]),v._v(" "),a("h2",{attrs:{id:"优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[v._v("#")]),v._v(" 优化")]),v._v(" "),a("p",[v._v("正常前端项目通过webpack构建，最初是不需要考虑太多的优化点。但是随着项目的持续迭代，代码量及开发人员的增加，或者对因项目实际的运行情况需要作出一些优化。优化点主要分为，体积和速度。")]),v._v(" "),a("p",[v._v("体积上，主要是针对生产环境来说的，本地开发调试则不需要考虑。如何减少构建产物的体积，现在能想到的主要有压缩、无用代码剔除、代码复用。这个优化点的主要体现在用户体验方面。更小的体积代表着更快的响应速度。")]),v._v(" "),a("ul",[a("li",[v._v("压缩并不是webpack提出的，很早之前就是一个必须考虑的优化点，webpack本身或插件都有比较好的解决方案。")]),v._v(" "),a("li",[v._v("无用代码的删除，或者说叫tree shaking也是很早就有的概念，前端在编码的时候，少不了注释和一些无用的模块引入，tree shaking的支持可以有效的删除这些代码。只需要做一些配置就能使用了，当然有一些限制，比如说不支持CommonJs的引入方式，对css等"),a("code",[v._v('import "xxx"')]),v._v("直接引用的代码需要注意下配置。")]),v._v(" "),a("li",[v._v("代码复用，从编码的角度来说，写一个函数可以复用逻辑。webpack则是体现在对模块的复用，可以通过配置决定如果这个模块被引用的多少次就单独打成一个包，当然也要考虑到复用模块的大小，如果模块只有10行代码，就没必要了。名词叫做 code split，代码分割。复用分割很好理解，但是如何合理的去做代码分割，达到最优或者最适合的分割方式才是需要考虑的。")])]),v._v(" "),a("p",[v._v("速度上，不论在本地开发环境还是生产环境速度都是需要考虑的点。本地开发，编译的速度直接决定我们的开发速度和体验。生产环境，编译速度的提升意味着可以更灵活的上线，对hotfix有更好的把控。但是两者在考虑速度优化的时候，需要关注的点还是有差异的。主要区别在，本地开发会进行重复编译，生产环境只关注首次的编译速度。整体的速度优化可以从几方面来说，减少编译范围、利用缓存减少二次编译速度、使用多进程编译及压缩。可以根据具体的使用场景决定如何配置。")]),v._v(" "),a("p",[v._v("待更新……")])])}),[],!1,null,null,null);_.default=t.exports}}]);