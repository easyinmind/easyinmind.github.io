(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{417:function(e,_,v){"use strict";v.r(_);var a=v(21),t=Object(a.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"webpack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),v("ol",[v("li",[e._v("常用属性")]),e._v(" "),v("li",[e._v("常用配置")]),e._v(" "),v("li",[e._v("高级特性")]),e._v(" "),v("li",[e._v("性能优化")]),e._v(" "),v("li",[e._v("babel相关")])]),e._v(" "),v("h2",{attrs:{id:"常用属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用属性"}},[e._v("#")]),e._v(" 常用属性")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("mode")]),v("br"),e._v(" "),v("code",[e._v("development")]),e._v(": 会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development. 为模块和 chunk 启用有效的名。\n"),v("code",[e._v("production")]),e._v(": 会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。开启一些优化（代码压缩等）。"),v("code",[e._v("none")]),e._v(": 不使用任何默认优化选项。\n设置 "),v("code",[e._v("NODE_ENV")]),e._v(" 并不会自动地设置 mode")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("context")]),v("br"),e._v("\n用于从配置中解析入口点(entry point)和 加载器(loader)")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("entry")]),e._v("  (产出 "),v("code",[e._v("chunk")]),e._v(" )"),v("br"),e._v("\nstring：单入口 => 单页应用 （输出一个文件，chunk）"),v("br"),e._v("\narray：多入口 => 单页应用 （输出一个文件，chunk）可以通过动态链的方式（Dll）打包第三方库"),v("br"),e._v("\nobject：多入口 => 多页应用 （输出多个文件，chunk）")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("output")]),v("br"),e._v(" "),v("code",[e._v("filename")]),e._v("： 输出的 chunk名 （对应 entry 中定义的module）"),v("br"),e._v(" "),v("code",[e._v("chunkFilename")]),e._v("： 输出的 chunk名（非entry 中的输出，懒加载产生的 chunk），默认值取 "),v("code",[e._v("[id].")]),v("br"),e._v(" "),v("code",[e._v("path")]),e._v("：输出文件的目录"),v("br"),e._v(" "),v("code",[e._v("publicPath")]),e._v("： 简单理解，增加前缀（可设置为CDN），在输出的文件名前面增加前缀，这些前缀可以是路径。")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("module")]),v("br"),e._v(" "),v("code",[e._v("noParse")]),e._v("： 不去解析某些第三方库（被忽略的库不能有其他依赖）"),v("br"),e._v(" "),v("code",[e._v("unsafeCache")]),e._v("：缓存模块，默认 false，如果为true，并且是node_modules里的模块，则开启\n"),v("code",[e._v("rules")]),e._v("： 配置 loader 处理非 js 文件")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("resolve")]),e._v("  设置模块如何被解析"),v("br"),e._v(" "),v("code",[e._v("alias")]),e._v("： 配置别名"),v("br"),e._v(" "),v("code",[e._v("extensions")]),e._v("：配置忽略后缀规则，会按照数组顺序解析，如果名字相同后缀不同，则使用数组第一项")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("optimization")]),v("br"),e._v(" "),v("code",[e._v("minimize")]),e._v("： 告知 webpack 使用 TerserPlugin 或其它在 optimization.minimizer 定义的插件压缩 bundle"),v("br"),e._v(" "),v("code",[e._v("minimizer")]),e._v("： 提供一个或多个定制过的 TerserPlugin 实例， 覆盖默认压缩工具(minimizer)"),v("br"),e._v(" "),v("code",[e._v("splitChunks")]),e._v(": 提取公共代码，防止代码被重复打包，拆分过大的js文件")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("plugins")]),e._v("：配置插件，值为数组")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("devtools")]),e._v("：控制source map的生成及格式")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("externals")]),e._v("：打包的时候排除一些模块，通过手动方式使用。请不要将这个模块注入编译后的js文件里，并保留源码内import/require这个模块的语句。（如jq，lodash等）")])])]),e._v(" "),v("h2",{attrs:{id:"常用配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用配置"}},[e._v("#")]),e._v(" 常用配置")]),e._v(" "),v("h2",{attrs:{id:"_1、支持样式文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、支持样式文件"}},[e._v("#")]),e._v(" 1、支持样式文件")]),e._v(" "),v("ul",[v("li",[e._v("style-loader")]),e._v(" "),v("li",[e._v("css-loader")]),e._v(" "),v("li",[e._v("postcss-loader（autoprefixer）")]),e._v(" "),v("li",[e._v("less-loader")])]),e._v(" "),v("h2",{attrs:{id:"_2、支持es-、jsx、ts文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、支持es-、jsx、ts文件"}},[e._v("#")]),e._v(" 2、支持ES+、JSX、TS文件")]),e._v(" "),v("ul",[v("li",[e._v("babel-loader")]),e._v(" "),v("li",[e._v("babel及相关预设 @babel/core @babel/preset-env @babel/preset-react @babel/preset-typescript")])]),e._v(" "),v("h2",{attrs:{id:"_3、支持图片、字体等文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、支持图片、字体等文件"}},[e._v("#")]),e._v(" 3、支持图片、字体等文件")]),e._v(" "),v("ul",[v("li",[e._v("file-loader")]),e._v(" "),v("li",[e._v("url-loader")])]),e._v(" "),v("h2",{attrs:{id:"_4、本地开发环境配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、本地开发环境配置"}},[e._v("#")]),e._v(" 4、本地开发环境配置")]),e._v(" "),v("ul",[v("li",[e._v("使用插件 webpack-dev-server")]),e._v(" "),v("li",[e._v("配置 devServer")])]),e._v(" "),v("h2",{attrs:{id:"_5、常用-plugin"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、常用-plugin"}},[e._v("#")]),e._v(" 5、常用 plugin")]),e._v(" "),v("ul",[v("li",[e._v("html-webpack-plugin 生成html")]),e._v(" "),v("li",[e._v("mini-css-extract-plugin 拆分css（替代style-loader）")]),e._v(" "),v("li",[e._v("optimize-css-assets-webpack-plugin 压缩css")]),e._v(" "),v("li",[e._v("terser-webpack-plugin 压缩js （production默认开启）")]),e._v(" "),v("li",[e._v("clean-webpack-plugin 清除打包目录（output定义的输出目录）")]),e._v(" "),v("li",[e._v("copy-webpack-plugin 复制文件到打包目录（icon文件等）")]),e._v(" "),v("li",[e._v("imagemin-webpack-plugin 批量压缩图片")])]),e._v(" "),v("h2",{attrs:{id:"高级特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高级特性"}},[e._v("#")]),e._v(" 高级特性")]),e._v(" "),v("h2",{attrs:{id:"_1、多入口配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、多入口配置"}},[e._v("#")]),e._v(" 1、多入口配置")]),e._v(" "),v("p",[e._v("entry 配置为对象，使用多个 html-webpack-plugin 实例对应每个entry，需注意设置插件的chunks属性指定每个页面引入的js")]),e._v(" "),v("h2",{attrs:{id:"_2、抽取及压缩css"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、抽取及压缩css"}},[e._v("#")]),e._v(" 2、抽取及压缩css")]),e._v(" "),v("p",[e._v("使用插件 mini-css-extract-plugin 及 MiniCssExtractPlugin.loader 替代style-loader 抽取css"),v("br"),e._v("\n在 optimization.minimizer 中使用 optimize-css-assets-webpack-plugin 压缩css")]),e._v(" "),v("h2",{attrs:{id:"_3、code-splitting及懒加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、code-splitting及懒加载"}},[e._v("#")]),e._v(" 3、code splitting及懒加载")]),e._v(" "),v("p",[e._v("optimization.splitChunks 可以配置拆包规则。Dynamic import（import()） 可以实现懒加载， webpack会把这种语法单独打包成一个 chunk")]),e._v(" "),v("h2",{attrs:{id:"_4、tree-shaking"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、tree-shaking"}},[e._v("#")]),e._v(" 4、Tree Shaking")]),e._v(" "),v("p",[e._v("默认 production 会开启 Tree Shaking，如果需要手动开启，设置 optimization.usedExports: true，")]),e._v(" "),v("h2",{attrs:{id:"_5、library-的打包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、library-的打包"}},[e._v("#")]),e._v(" 5、Library 的打包")]),e._v(" "),v("p",[e._v("使用 externals 避免其他第三方包的打包（如果有），设置 output.library 暴露名称，设置 output.libraryTarget 可以引入的方式")]),e._v(" "),v("h2",{attrs:{id:"性能优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[e._v("#")]),e._v(" 性能优化")]),e._v(" "),v("h2",{attrs:{id:"_1、构建速度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、构建速度"}},[e._v("#")]),e._v(" 1、构建速度")]),e._v(" "),v("ul",[v("li",[e._v("缓存 二次构建速度\n"),v("ul",[v("li",[e._v("优化babel-loader（默认支持缓存）")]),e._v(" "),v("li",[e._v("使用cache-loader 优化不支持缓存的loader（写在use最前面）")]),e._v(" "),v("li",[e._v("DllPlugin 配置动态链接 减少二次不必要打包")])])]),e._v(" "),v("li",[e._v("多核打包 提升构建速度\n"),v("ul",[v("li",[e._v("thread-loader")]),e._v(" "),v("li",[e._v("happypack")]),e._v(" "),v("li",[e._v("多核压缩")])])]),e._v(" "),v("li",[e._v("减少不必要的构建过程\n"),v("ul",[v("li",[e._v("IgnorePlugin 忽略三方包的指定目录，指定目录不会被打包进去")]),e._v(" "),v("li",[e._v("使用 Loader 时可以通过 test 、 include 、 exclude 三个配置项来命中 Loader 要应用规则的文件")]),e._v(" "),v("li",[e._v("module.noParse 忽略对部分没采用模块化的文件的递归解析处理")]),e._v(" "),v("li",[e._v("resolve.extensions\n"),v("ul",[v("li",[e._v("列表要尽可能的小，不要把项目中不可能存在的情况写到后缀尝试列表中")]),e._v(" "),v("li",[e._v("频率出现最高的文件后缀要优先放在最前面，以做到尽快的退出寻找过程")]),e._v(" "),v("li",[e._v("在源码中写导入语句时，要尽可能的带上后缀，从而可以避免寻找过程")])])]),e._v(" "),v("li",[e._v("resolve.alias 通过别名来把原导入路径映射成一个新的导入路径，减少耗时的递归解析操作")])])]),e._v(" "),v("li",[e._v("避免手动重复操作\n"),v("ul",[v("li",[e._v("自动刷新")]),e._v(" "),v("li",[e._v("热更新")])])])]),e._v(" "),v("h2",{attrs:{id:"_2、产出代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、产出代码"}},[e._v("#")]),e._v(" 2、产出代码")]),e._v(" "),v("ul",[v("li",[e._v("开启生产环境\n"),v("ul",[v("li",[e._v("默认会开启压缩、tree sharking等优化")])])]),e._v(" "),v("li",[e._v("配置 CDN")]),e._v(" "),v("li",[e._v("公用代码提取、合理分包")]),e._v(" "),v("li",[e._v("懒加载")]),e._v(" "),v("li",[e._v("bundle + hash 利用浏览器缓存")]),e._v(" "),v("li",[e._v("scope hosting 将多个模块打包到一个函数 减少体积")]),e._v(" "),v("li",[e._v("小图片偏使用base64 减少http")])])])}),[],!1,null,null,null);_.default=t.exports}}]);